desc:Live Quantize


slider1:0<0,4,1{Next Bar,1/2,1/4,1/8,1/16}>Quantize to: 
slider2:0<0,100,1>% late tolerance
slider3:0<0,1,1{Off,On}>Trigger mode (note offs don't cancel trigger)


//------------------------------------------------------------------------------------------------
@init 
Q_116=0.25; Q_18=0.5; Q_14=1; Q_12=2; Q_BAR=4;

function setQuantizeSamples()(
  slider1==0 ? q=Q_BAR;
  slider1==1 ? q=Q_12;
  slider1==2 ? q=Q_14;
  slider1==3 ? q=Q_18;
  slider1==4 ? q=Q_116;
);

send_offset=-1; 

last_beat_position=0;
seq=0;
evt_width=3;
seq_len=0;
function addEventToSeq(samples_ahead,m1,m2)
(
   i = seq_len;
   seq[evt_width*i] = samples_ahead;
   seq[evt_width*i+1] = m1;
   seq[evt_width*i+2] = m2;
   seq_len += 1;
);


function seqHasEvent(m1,m2)
(
  i=0;
  evt=-1;
  loop(seq_len,
    pos=i*evt_width;
    seq[pos+1]==m1 && seq[pos+2]&$xFF==m2&$xFF ? evt=i;
    i+=1;
  );
  evt; //returns (last found) event position if found
);


function removeEventFromSeq(entry)
(
  entry < seq_len ? (
    memcpy(seq+evt_width*entry,seq+evt_width*(entry+1),
                       evt_width*(seq_len-entry-1));
    seq_len-=1;
  );
);


function sendEvent(event)
(
  sp=evt_width*event;
  midisend(seq[sp]+samplesblock,seq[sp+1],seq[sp+2]);
  removeEventFromSeq(event);
);


function sendThisBufferEvents()
(
  sb=samplesblock;
  i=0;
  while (i<seq_len)(
    pos=evt_width*i;
    seq[pos]-=sb;
    seq[pos]<0 ? (
      sendEvent(i);
    ):(
      i+=1;
    );
  );
);


//------------------------------------------------------------------------------------------------
@slider
setQuantizeSamples();
late_allowance=slider2/100;
trigger_mode=slider3;



//------------------------------------------------------------------------------------------------
@block
play_state!=last_play_state ? (last_play_state=play_state);
q_sample_len=q*(srate/tempo)*60;
play_state!=0 ? (
  setQuantizeSamples();
  beat_sample_pos=beat_position*((srate/tempo)*60);
  
  q==Q_BAR ? ( 
    whole_bars=(beat_position*0.25)|0;
    next_q_sample_pos=(whole_bars+1)*(((srate/tempo)*60)*4);
    bar_beat_pos=beat_position - (whole_bars*4); //assumes 4/4 here
    q_off=bar_beat_pos-((bar_beat_pos/q)|0); 
  ):(
    bq=beat_position/q;
    beat_pos_in_whole_q_steps=bq|0;
    next_q_step=beat_pos_in_whole_q_steps+1;
    next_q_sample_pos=(next_q_step*(q))*((srate/tempo)*60);
    q_off=(bq-beat_pos_in_whole_q_steps)*q;
  );
  
  q_sample_pos=beat_position*((srate/tempo)*60);
  send_offset=next_q_sample_pos-q_sample_pos;
);


while (midirecv(offset,msg1,msg23))
( 
  type=msg1&$xF0;
  type==$x90 || type==$x80 && play_state!=0  ?
  (  
     type==$x80 || (type==$x90 && (q_off>(q*late_allowance))) ? ( 
       type==$x80 ? (
         epos=seqHasEvent($x90|(msg1&$xF),msg23);
         epos>-1 ? (
           trigger_mode ? (
             addEventToSeq(send_offset+q_sample_len,msg1,msg23);
           ):(
             removeEventFromSeq(epos);
           );
         ):(
           addEventToSeq(send_offset,msg1,msg23);
         );
       ):(
         addEventToSeq(send_offset,msg1,msg23);
       );
     ):(
       midisend(offset,msg1,msg23);
     );
  ):(
     midisend(offset,msg1,msg23);
  );
);

sendThisBufferEvents();
//------------------------------------------------------------------------------------------------

  
